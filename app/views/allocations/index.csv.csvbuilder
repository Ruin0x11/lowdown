csv << [
  'Allocation Name',
  'Group Trip',
  'Program Name',
  'Project Name',
  'Project Number',
  'Project Funding Source',
  'Project Funding Subsource',
  'Reporting Agency Name',
  'Reporting Agency Short Name',
  'Reporting Agency Type',
  'Provider Name',
  'Provider Short Name',
  'Provider Type',
  'County',
  'Eligibility',
  'Do Not Show On Flex Reports',
  'Trip Collection Method',
  'Run Collection Method',
  'Cost Collection Method',
  'RouteMatch Override',
  'RouteMatch Provider Code',
  'Admin/Ops Data',
  'Vehicle Maintenance Data',
  'TriMet Provider',
  'TriMet Program',
  'TriMet E&D Report Group',
  'Activated Date',
  'Inactivated Date',
  'Notes'
]
@allocations.each do |a|
  csv << [
    a.name,
    a.group_trip ? 'True' : 'False',
    a.program.try(:name),
    a.project.try(:name),
    a.project.try(:project_number),
    a.project.try(:funding_source).try(:funding_source_name),
    a.project.try(:funding_source).try(:funding_subsource_name),
    a.reporting_agency.try(:name),
    a.reporting_agency.try(:short_name),
    a.reporting_agency.try(:provider_type),
    a.provider.try(:name),
    a.provider.try(:short_name),
    a.provider.try(:provider_type),
    a.county,
    a.eligibility,
    a.do_not_show_on_flex_reports,
    a.trip_collection_method,
    a.run_collection_method,
    a.cost_collection_method,
    a.override.try(:name),
    a.routematch_provider_code,
    a.admin_ops_data, 
    a.vehicle_maint_data,
    a.trimet_provider.try(:name),
    a.trimet_program.try(:name),
    a.trimet_report_group.try(:name),
    a.activated_on,
    a.inactivated_on,
    a.notes
  ]
end
